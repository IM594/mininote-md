name: Release and Publish

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}
          
      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Get latest version
        id: get_version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          
      - name: Bump version
        id: bump_version
        run: |
          CURRENT_VERSION=${LATEST_TAG#v}
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          PATCH=$((VERSION_PARTS[2] + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
      - name: Update package.json
        run: |
          npm version $NEW_VERSION --no-git-tag-version
          
      - name: Commit and tag
        run: |
          git add package.json
          git commit -m "Release v$NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          
      - name: Push changes
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin HEAD:main
          git push --tags
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

  build:
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build only
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          cache-from: type=registry,ref=im594/mininote-md:buildcache
          
  publish:
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: im594/mininote-md
          tags: |
            type=raw,value=latest
            type=raw,value={{version}}
            type=sha,prefix=sha-
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=im594/mininote-md:buildcache
          cache-to: type=registry,ref=im594/mininote-md:buildcache,mode=max
name: Release and Publish

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      SKIP_RELEASE: ${{ env.SKIP_RELEASE }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}
          
      - name: Check version
        id: check_version
        run: |
          # 从package.json获取版本
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # 获取最新tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          
          if [ "$LATEST_VERSION" = "$CURRENT_VERSION" ]; then
            echo "版本号未变化，跳过发布"
            echo "SKIP_RELEASE=true" >> $GITHUB_ENV
          else
            echo "检测到新版本，将创建release"
            echo "SKIP_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Create Release
        if: env.SKIP_RELEASE != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          name: Release v${{ env.CURRENT_VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

  docker:
    runs-on: ubuntu-latest
    needs: [release]
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.release.outputs.SKIP_RELEASE != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: im594/mininote-md
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.package-version.outputs.version }}
            type=sha,prefix=sha-
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=im594/mininote-md:buildcache
          cache-to: type=registry,ref=im594/mininote-md:buildcache,mode=max

  pr_docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Set PR status
        run: |
          echo "Running in PR mode - will build and test with temporary tag"
          
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: im594/mininote-md
          tags: |
            type=raw,value=pr-${{ github.event.pull_request.number }}
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=im594/mininote-md:buildcache
          cache-to: type=registry,ref=im594/mininote-md:buildcache,mode=max

      - name: Cleanup PR image
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.DOCKERHUB_USERNAME }}'", "password": "'${{ secrets.DOCKERHUB_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          curl -X DELETE -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/im594/mininote-md/tags/pr-${{ github.event.pull_request.number }}/